
Reflow-Oven-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004440  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004608  08004608  00005608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004620  08004620  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004620  08004620  00005620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004624  08004624  00005624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004628  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000001c  08004644  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004644  000061e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d798  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002035  00000000  00000000  000137e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00015820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a98  00000000  00000000  000165c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002315e  00000000  00000000  00017058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010092  00000000  00000000  0003a1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf48  00000000  00000000  0004a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  001271d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0012ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080045f0 	.word	0x080045f0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000020 	.word	0x20000020
 8000204:	080045f0 	.word	0x080045f0

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_uldivmod>:
 8000814:	b953      	cbnz	r3, 800082c <__aeabi_uldivmod+0x18>
 8000816:	b94a      	cbnz	r2, 800082c <__aeabi_uldivmod+0x18>
 8000818:	2900      	cmp	r1, #0
 800081a:	bf08      	it	eq
 800081c:	2800      	cmpeq	r0, #0
 800081e:	bf1c      	itt	ne
 8000820:	f04f 31ff 	movne.w	r1, #4294967295
 8000824:	f04f 30ff 	movne.w	r0, #4294967295
 8000828:	f000 b96a 	b.w	8000b00 <__aeabi_idiv0>
 800082c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000834:	f000 f806 	bl	8000844 <__udivmoddi4>
 8000838:	f8dd e004 	ldr.w	lr, [sp, #4]
 800083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <__udivmoddi4>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	9d08      	ldr	r5, [sp, #32]
 800084a:	460c      	mov	r4, r1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d14e      	bne.n	80008ee <__udivmoddi4+0xaa>
 8000850:	4694      	mov	ip, r2
 8000852:	458c      	cmp	ip, r1
 8000854:	4686      	mov	lr, r0
 8000856:	fab2 f282 	clz	r2, r2
 800085a:	d962      	bls.n	8000922 <__udivmoddi4+0xde>
 800085c:	b14a      	cbz	r2, 8000872 <__udivmoddi4+0x2e>
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	4091      	lsls	r1, r2
 8000864:	fa20 f303 	lsr.w	r3, r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	4319      	orrs	r1, r3
 800086e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000872:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000876:	fa1f f68c 	uxth.w	r6, ip
 800087a:	fbb1 f4f7 	udiv	r4, r1, r7
 800087e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000882:	fb07 1114 	mls	r1, r7, r4, r1
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb04 f106 	mul.w	r1, r4, r6
 800088e:	4299      	cmp	r1, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x64>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f104 30ff 	add.w	r0, r4, #4294967295
 800089a:	f080 8112 	bcs.w	8000ac2 <__udivmoddi4+0x27e>
 800089e:	4299      	cmp	r1, r3
 80008a0:	f240 810f 	bls.w	8000ac2 <__udivmoddi4+0x27e>
 80008a4:	3c02      	subs	r4, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1a59      	subs	r1, r3, r1
 80008aa:	fa1f f38e 	uxth.w	r3, lr
 80008ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b2:	fb07 1110 	mls	r1, r7, r0, r1
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f606 	mul.w	r6, r0, r6
 80008be:	429e      	cmp	r6, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x94>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ca:	f080 80fc 	bcs.w	8000ac6 <__udivmoddi4+0x282>
 80008ce:	429e      	cmp	r6, r3
 80008d0:	f240 80f9 	bls.w	8000ac6 <__udivmoddi4+0x282>
 80008d4:	4463      	add	r3, ip
 80008d6:	3802      	subs	r0, #2
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008de:	2100      	movs	r1, #0
 80008e0:	b11d      	cbz	r5, 80008ea <__udivmoddi4+0xa6>
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d905      	bls.n	80008fe <__udivmoddi4+0xba>
 80008f2:	b10d      	cbz	r5, 80008f8 <__udivmoddi4+0xb4>
 80008f4:	e9c5 0100 	strd	r0, r1, [r5]
 80008f8:	2100      	movs	r1, #0
 80008fa:	4608      	mov	r0, r1
 80008fc:	e7f5      	b.n	80008ea <__udivmoddi4+0xa6>
 80008fe:	fab3 f183 	clz	r1, r3
 8000902:	2900      	cmp	r1, #0
 8000904:	d146      	bne.n	8000994 <__udivmoddi4+0x150>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d302      	bcc.n	8000910 <__udivmoddi4+0xcc>
 800090a:	4290      	cmp	r0, r2
 800090c:	f0c0 80f0 	bcc.w	8000af0 <__udivmoddi4+0x2ac>
 8000910:	1a86      	subs	r6, r0, r2
 8000912:	eb64 0303 	sbc.w	r3, r4, r3
 8000916:	2001      	movs	r0, #1
 8000918:	2d00      	cmp	r5, #0
 800091a:	d0e6      	beq.n	80008ea <__udivmoddi4+0xa6>
 800091c:	e9c5 6300 	strd	r6, r3, [r5]
 8000920:	e7e3      	b.n	80008ea <__udivmoddi4+0xa6>
 8000922:	2a00      	cmp	r2, #0
 8000924:	f040 8090 	bne.w	8000a48 <__udivmoddi4+0x204>
 8000928:	eba1 040c 	sub.w	r4, r1, ip
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	fa1f f78c 	uxth.w	r7, ip
 8000934:	2101      	movs	r1, #1
 8000936:	fbb4 f6f8 	udiv	r6, r4, r8
 800093a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093e:	fb08 4416 	mls	r4, r8, r6, r4
 8000942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000946:	fb07 f006 	mul.w	r0, r7, r6
 800094a:	4298      	cmp	r0, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x11c>
 800094e:	eb1c 0303 	adds.w	r3, ip, r3
 8000952:	f106 34ff 	add.w	r4, r6, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x11a>
 8000958:	4298      	cmp	r0, r3
 800095a:	f200 80cd 	bhi.w	8000af8 <__udivmoddi4+0x2b4>
 800095e:	4626      	mov	r6, r4
 8000960:	1a1c      	subs	r4, r3, r0
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb4 f0f8 	udiv	r0, r4, r8
 800096a:	fb08 4410 	mls	r4, r8, r0, r4
 800096e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000972:	fb00 f707 	mul.w	r7, r0, r7
 8000976:	429f      	cmp	r7, r3
 8000978:	d908      	bls.n	800098c <__udivmoddi4+0x148>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000982:	d202      	bcs.n	800098a <__udivmoddi4+0x146>
 8000984:	429f      	cmp	r7, r3
 8000986:	f200 80b0 	bhi.w	8000aea <__udivmoddi4+0x2a6>
 800098a:	4620      	mov	r0, r4
 800098c:	1bdb      	subs	r3, r3, r7
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	e7a5      	b.n	80008e0 <__udivmoddi4+0x9c>
 8000994:	f1c1 0620 	rsb	r6, r1, #32
 8000998:	408b      	lsls	r3, r1
 800099a:	fa22 f706 	lsr.w	r7, r2, r6
 800099e:	431f      	orrs	r7, r3
 80009a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a4:	fa04 f301 	lsl.w	r3, r4, r1
 80009a8:	ea43 030c 	orr.w	r3, r3, ip
 80009ac:	40f4      	lsrs	r4, r6
 80009ae:	fa00 f801 	lsl.w	r8, r0, r1
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b8:	fbb4 fef0 	udiv	lr, r4, r0
 80009bc:	fa1f fc87 	uxth.w	ip, r7
 80009c0:	fb00 441e 	mls	r4, r0, lr, r4
 80009c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c8:	fb0e f90c 	mul.w	r9, lr, ip
 80009cc:	45a1      	cmp	r9, r4
 80009ce:	fa02 f201 	lsl.w	r2, r2, r1
 80009d2:	d90a      	bls.n	80009ea <__udivmoddi4+0x1a6>
 80009d4:	193c      	adds	r4, r7, r4
 80009d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009da:	f080 8084 	bcs.w	8000ae6 <__udivmoddi4+0x2a2>
 80009de:	45a1      	cmp	r9, r4
 80009e0:	f240 8081 	bls.w	8000ae6 <__udivmoddi4+0x2a2>
 80009e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	eba4 0409 	sub.w	r4, r4, r9
 80009ee:	fa1f f983 	uxth.w	r9, r3
 80009f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f6:	fb00 4413 	mls	r4, r0, r3, r4
 80009fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a02:	45a4      	cmp	ip, r4
 8000a04:	d907      	bls.n	8000a16 <__udivmoddi4+0x1d2>
 8000a06:	193c      	adds	r4, r7, r4
 8000a08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a0c:	d267      	bcs.n	8000ade <__udivmoddi4+0x29a>
 8000a0e:	45a4      	cmp	ip, r4
 8000a10:	d965      	bls.n	8000ade <__udivmoddi4+0x29a>
 8000a12:	3b02      	subs	r3, #2
 8000a14:	443c      	add	r4, r7
 8000a16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1e:	eba4 040c 	sub.w	r4, r4, ip
 8000a22:	429c      	cmp	r4, r3
 8000a24:	46ce      	mov	lr, r9
 8000a26:	469c      	mov	ip, r3
 8000a28:	d351      	bcc.n	8000ace <__udivmoddi4+0x28a>
 8000a2a:	d04e      	beq.n	8000aca <__udivmoddi4+0x286>
 8000a2c:	b155      	cbz	r5, 8000a44 <__udivmoddi4+0x200>
 8000a2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a32:	eb64 040c 	sbc.w	r4, r4, ip
 8000a36:	fa04 f606 	lsl.w	r6, r4, r6
 8000a3a:	40cb      	lsrs	r3, r1
 8000a3c:	431e      	orrs	r6, r3
 8000a3e:	40cc      	lsrs	r4, r1
 8000a40:	e9c5 6400 	strd	r6, r4, [r5]
 8000a44:	2100      	movs	r1, #0
 8000a46:	e750      	b.n	80008ea <__udivmoddi4+0xa6>
 8000a48:	f1c2 0320 	rsb	r3, r2, #32
 8000a4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	fa24 f303 	lsr.w	r3, r4, r3
 8000a58:	4094      	lsls	r4, r2
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a64:	fa1f f78c 	uxth.w	r7, ip
 8000a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb00 f107 	mul.w	r1, r0, r7
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x24c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a86:	d22c      	bcs.n	8000ae2 <__udivmoddi4+0x29e>
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d92a      	bls.n	8000ae2 <__udivmoddi4+0x29e>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a98:	fb08 3311 	mls	r3, r8, r1, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb01 f307 	mul.w	r3, r1, r7
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x276>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ab0:	d213      	bcs.n	8000ada <__udivmoddi4+0x296>
 8000ab2:	42a3      	cmp	r3, r4
 8000ab4:	d911      	bls.n	8000ada <__udivmoddi4+0x296>
 8000ab6:	3902      	subs	r1, #2
 8000ab8:	4464      	add	r4, ip
 8000aba:	1ae4      	subs	r4, r4, r3
 8000abc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ac0:	e739      	b.n	8000936 <__udivmoddi4+0xf2>
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	e6f0      	b.n	80008a8 <__udivmoddi4+0x64>
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e706      	b.n	80008d8 <__udivmoddi4+0x94>
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d2ae      	bcs.n	8000a2c <__udivmoddi4+0x1e8>
 8000ace:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ad2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad6:	3801      	subs	r0, #1
 8000ad8:	e7a8      	b.n	8000a2c <__udivmoddi4+0x1e8>
 8000ada:	4631      	mov	r1, r6
 8000adc:	e7ed      	b.n	8000aba <__udivmoddi4+0x276>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e799      	b.n	8000a16 <__udivmoddi4+0x1d2>
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e7d4      	b.n	8000a90 <__udivmoddi4+0x24c>
 8000ae6:	46d6      	mov	lr, sl
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1a6>
 8000aea:	4463      	add	r3, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	e74d      	b.n	800098c <__udivmoddi4+0x148>
 8000af0:	4606      	mov	r6, r0
 8000af2:	4623      	mov	r3, r4
 8000af4:	4608      	mov	r0, r1
 8000af6:	e70f      	b.n	8000918 <__udivmoddi4+0xd4>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	e730      	b.n	8000960 <__udivmoddi4+0x11c>
 8000afe:	bf00      	nop

08000b00 <__aeabi_idiv0>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 ffba 	bl	8001a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f888 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 fa96 	bl	8001040 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b14:	f000 f8e4 	bl	8000ce0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b18:	f000 f934 	bl	8000d84 <MX_ADC2_Init>
  MX_SPI2_Init();
 8000b1c:	f000 f984 	bl	8000e28 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b20:	f000 f9b8 	bl	8000e94 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000b24:	f000 f9ec 	bl	8000f00 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // State machine
	  switch(state)
 8000b28:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <main+0xf4>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d8fb      	bhi.n	8000b28 <main+0x24>
 8000b30:	a201      	add	r2, pc, #4	@ (adr r2, 8000b38 <main+0x34>)
 8000b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b36:	bf00      	nop
 8000b38:	08000b49 	.word	0x08000b49
 8000b3c:	08000b6f 	.word	0x08000b6f
 8000b40:	08000b99 	.word	0x08000b99
 8000b44:	08000bcd 	.word	0x08000bcd
	  {
	  case IDLE:
		  HAL_GPIO_WritePin(GPIOA, SSR_Pin, GPIO_PIN_RESET);	// Turn off SSR
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b4e:	482b      	ldr	r0, [pc, #172]	@ (8000bfc <main+0xf8>)
 8000b50:	f001 ff5e 	bl	8002a10 <HAL_GPIO_WritePin>
		  seconds_count = 0;
 8000b54:	4b2a      	ldr	r3, [pc, #168]	@ (8000c00 <main+0xfc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	801a      	strh	r2, [r3, #0]
		  integral = 0;
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <main+0x100>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
		  oven_task(0);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 fcd7 	bl	8001514 <oven_task>
		  RGB_LED_Color(RGB_LED_RED);	// Red color indicates oven is off
 8000b66:	2001      	movs	r0, #1
 8000b68:	f000 fb0c 	bl	8001184 <RGB_LED_Color>
		  break;
 8000b6c:	e042      	b.n	8000bf4 <main+0xf0>
	  case PREHEAT:
		  oven_task(soak_setpoint);
 8000b6e:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <main+0x104>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fcce 	bl	8001514 <oven_task>
		  if (seconds_count > soak_duration)
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <main+0xfc>)
 8000b7a:	881a      	ldrh	r2, [r3, #0]
 8000b7c:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <main+0x108>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d905      	bls.n	8000b90 <main+0x8c>
			  state++;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <main+0xf4>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <main+0xf4>)
 8000b8e:	701a      	strb	r2, [r3, #0]
		  RGB_LED_Color(RGB_LED_YELLOW);	// Yellow color indicates oven is in Preheat
 8000b90:	2005      	movs	r0, #5
 8000b92:	f000 faf7 	bl	8001184 <RGB_LED_Color>
		  break;
 8000b96:	e02d      	b.n	8000bf4 <main+0xf0>
	  case REFLOW:
		  oven_task(reflow_setpoint);
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <main+0x10c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fcb9 	bl	8001514 <oven_task>
		  if (seconds_count > soak_duration + reflow_duration)
 8000ba2:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <main+0xfc>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <main+0x108>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <main+0x110>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	440b      	add	r3, r1
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dd05      	ble.n	8000bc4 <main+0xc0>
			  state++;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <main+0xf4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <main+0xf4>)
 8000bc2:	701a      	strb	r2, [r3, #0]
		  RGB_LED_Color(RGB_LED_GREEN);	// Green color indicates oven is in Reflow
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f000 fadd 	bl	8001184 <RGB_LED_Color>
		  break;
 8000bca:	e013      	b.n	8000bf4 <main+0xf0>
	  case COOLDOWN:
		  // Beep sound for 1 sec
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <main+0x114>)
 8000bd0:	f002 fe36 	bl	8003840 <HAL_TIM_PWM_Start>
		  HAL_Delay(1000);
 8000bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd8:	f000 ffc4 	bl	8001b64 <HAL_Delay>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	480e      	ldr	r0, [pc, #56]	@ (8000c18 <main+0x114>)
 8000be0:	f002 fef6 	bl	80039d0 <HAL_TIM_PWM_Stop>
		  state = IDLE;
 8000be4:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <main+0xf4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		  time_counter_enable = 0;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <main+0x118>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
		  break;
 8000bf0:	bf00      	nop
 8000bf2:	e799      	b.n	8000b28 <main+0x24>
	  switch(state)
 8000bf4:	e798      	b.n	8000b28 <main+0x24>
 8000bf6:	bf00      	nop
 8000bf8:	200001c8 	.word	0x200001c8
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	200001dc 	.word	0x200001dc
 8000c04:	200001d0 	.word	0x200001d0
 8000c08:	20000009 	.word	0x20000009
 8000c0c:	2000000c 	.word	0x2000000c
 8000c10:	2000000a 	.word	0x2000000a
 8000c14:	2000000e 	.word	0x2000000e
 8000c18:	20000178 	.word	0x20000178
 8000c1c:	200001da 	.word	0x200001da

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	@ 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2234      	movs	r2, #52	@ 0x34
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fcb2 	bl	8004598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <SystemClock_Config+0xb8>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4c:	4a22      	ldr	r2, [pc, #136]	@ (8000cd8 <SystemClock_Config+0xb8>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <SystemClock_Config+0xb8>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <SystemClock_Config+0xbc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cdc <SystemClock_Config+0xbc>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <SystemClock_Config+0xbc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fa03 	bl	80030a0 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ca0:	f000 fcb2 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fed7 	bl	8002a74 <HAL_RCC_ClockConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ccc:	f000 fc9c 	bl	8001608 <Error_Handler>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3750      	adds	r7, #80	@ 0x50
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000cf4:	4a21      	ldr	r2, [pc, #132]	@ (8000d7c <MX_ADC1_Init+0x9c>)
 8000cf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d18:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d20:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <MX_ADC1_Init+0xa0>)
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d3e:	480e      	ldr	r0, [pc, #56]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d40:	f000 ff34 	bl	8001bac <HAL_ADC_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 fc5d 	bl	8001608 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <MX_ADC1_Init+0x98>)
 8000d60:	f001 f978 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d6a:	f000 fc4d 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000038 	.word	0x20000038
 8000d7c:	40012000 	.word	0x40012000
 8000d80:	0f000001 	.word	0x0f000001

08000d84 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000d98:	4a21      	ldr	r2, [pc, #132]	@ (8000e20 <MX_ADC2_Init+0x9c>)
 8000d9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000dc4:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <MX_ADC2_Init+0xa0>)
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000de2:	480e      	ldr	r0, [pc, #56]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000de4:	f000 fee2 	bl	8001bac <HAL_ADC_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fc0b 	bl	8001608 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <MX_ADC2_Init+0x98>)
 8000e04:	f001 f926 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000e0e:	f000 fbfb 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000080 	.word	0x20000080
 8000e20:	40012100 	.word	0x40012100
 8000e24:	0f000001 	.word	0x0f000001

08000e28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e2e:	4a18      	ldr	r2, [pc, #96]	@ (8000e90 <MX_SPI2_Init+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_SPI2_Init+0x64>)
 8000e7a:	f002 fbaf 	bl	80035dc <HAL_SPI_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e84:	f000 fbc0 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000c8 	.word	0x200000c8
 8000e90:	40003800 	.word	0x40003800

08000e94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	@ (8000efc <MX_SPI3_Init+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000ea0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ea4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <MX_SPI3_Init+0x64>)
 8000ee6:	f002 fb79 	bl	80035dc <HAL_SPI_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000ef0:	f000 fb8a 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000120 	.word	0x20000120
 8000efc:	40003c00 	.word	0x40003c00

08000f00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b096      	sub	sp, #88	@ 0x58
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2220      	movs	r2, #32
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f003 fb2d 	bl	8004598 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f40:	4a3e      	ldr	r2, [pc, #248]	@ (800103c <MX_TIM1_Init+0x13c>)
 8000f42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000f44:	4b3c      	ldr	r3, [pc, #240]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f46:	220f      	movs	r2, #15
 8000f48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8000f50:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f52:	22d2      	movs	r2, #210	@ 0xd2
 8000f54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b38      	ldr	r3, [pc, #224]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5c:	4b36      	ldr	r3, [pc, #216]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f68:	4833      	ldr	r0, [pc, #204]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f6a:	f002 fbc0 	bl	80036ee <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f74:	f000 fb48 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f82:	4619      	mov	r1, r3
 8000f84:	482c      	ldr	r0, [pc, #176]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f86:	f002 fe55 	bl	8003c34 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f90:	f000 fb3a 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f94:	4828      	ldr	r0, [pc, #160]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000f96:	f002 fbf9 	bl	800378c <HAL_TIM_PWM_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000fa0:	f000 fb32 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4821      	ldr	r0, [pc, #132]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000fb4:	f003 fa22 	bl	80043fc <HAL_TIMEx_MasterConfigSynchronization>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000fbe:	f000 fb23 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc2:	2360      	movs	r3, #96	@ 0x60
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 105;
 8000fc6:	2369      	movs	r3, #105	@ 0x69
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4814      	ldr	r0, [pc, #80]	@ (8001038 <MX_TIM1_Init+0x138>)
 8000fe8:	f002 fd62 	bl	8003ab0 <HAL_TIM_PWM_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ff2:	f000 fb09 	bl	8001608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800100a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800100e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4807      	ldr	r0, [pc, #28]	@ (8001038 <MX_TIM1_Init+0x138>)
 800101a:	f003 fa6b 	bl	80044f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001024:	f000 faf0 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001028:	4803      	ldr	r0, [pc, #12]	@ (8001038 <MX_TIM1_Init+0x138>)
 800102a:	f000 fc5f 	bl	80018ec <HAL_TIM_MspPostInit>

}
 800102e:	bf00      	nop
 8001030:	3758      	adds	r7, #88	@ 0x58
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000178 	.word	0x20000178
 800103c:	40010000 	.word	0x40010000

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b46      	ldr	r3, [pc, #280]	@ (8001174 <MX_GPIO_Init+0x134>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a45      	ldr	r2, [pc, #276]	@ (8001174 <MX_GPIO_Init+0x134>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b43      	ldr	r3, [pc, #268]	@ (8001174 <MX_GPIO_Init+0x134>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b3f      	ldr	r3, [pc, #252]	@ (8001174 <MX_GPIO_Init+0x134>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a3e      	ldr	r2, [pc, #248]	@ (8001174 <MX_GPIO_Init+0x134>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b3c      	ldr	r3, [pc, #240]	@ (8001174 <MX_GPIO_Init+0x134>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <MX_GPIO_Init+0x134>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a37      	ldr	r2, [pc, #220]	@ (8001174 <MX_GPIO_Init+0x134>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <MX_GPIO_Init+0x134>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_CS_Pin|DISP_T_CS_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	21a0      	movs	r1, #160	@ 0xa0
 80010ae:	4832      	ldr	r0, [pc, #200]	@ (8001178 <MX_GPIO_Init+0x138>)
 80010b0:	f001 fcae 	bl	8002a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_RESET_Pin|DISP_DC_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2143      	movs	r1, #67	@ 0x43
 80010b8:	4830      	ldr	r0, [pc, #192]	@ (800117c <MX_GPIO_Init+0x13c>)
 80010ba:	f001 fca9 	bl	8002a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin|REG_LED_R_Pin|REG_LED_G_Pin|SSR_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 410e 	mov.w	r1, #36352	@ 0x8e00
 80010c4:	482e      	ldr	r0, [pc, #184]	@ (8001180 <MX_GPIO_Init+0x140>)
 80010c6:	f001 fca3 	bl	8002a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin BTN4_Pin
                           ZERO_CROSS_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin
 80010ca:	f241 03cc 	movw	r3, #4300	@ 0x10cc
 80010ce:	60fb      	str	r3, [r7, #12]
                          |ZERO_CROSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4619      	mov	r1, r3
 80010e0:	4827      	ldr	r0, [pc, #156]	@ (8001180 <MX_GPIO_Init+0x140>)
 80010e2:	f001 fb01 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_CS_Pin DISP_T_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin|DISP_T_CS_Pin;
 80010e6:	23a0      	movs	r3, #160	@ 0xa0
 80010e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	481e      	ldr	r0, [pc, #120]	@ (8001178 <MX_GPIO_Init+0x138>)
 80010fe:	f001 faf3 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_RESET_Pin DISP_DC_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = DISP_RESET_Pin|DISP_DC_Pin|SD_CS_Pin;
 8001102:	2343      	movs	r3, #67	@ 0x43
 8001104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4619      	mov	r1, r3
 8001118:	4818      	ldr	r0, [pc, #96]	@ (800117c <MX_GPIO_Init+0x13c>)
 800111a:	f001 fae5 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : REG_LED_B_Pin REG_LED_R_Pin REG_LED_G_Pin SSR_Pin */
  GPIO_InitStruct.Pin = REG_LED_B_Pin|REG_LED_R_Pin|REG_LED_G_Pin|SSR_Pin;
 800111e:	f44f 430e 	mov.w	r3, #36352	@ 0x8e00
 8001122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	4812      	ldr	r0, [pc, #72]	@ (8001180 <MX_GPIO_Init+0x140>)
 8001138:	f001 fad6 	bl	80026e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 15);
 800113c:	220f      	movs	r2, #15
 800113e:	2100      	movs	r1, #0
 8001140:	2008      	movs	r0, #8
 8001142:	f001 fa9a 	bl	800267a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001146:	2008      	movs	r0, #8
 8001148:	f001 fab3 	bl	80026b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2009      	movs	r0, #9
 8001152:	f001 fa92 	bl	800267a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001156:	2009      	movs	r0, #9
 8001158:	f001 faab 	bl	80026b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2028      	movs	r0, #40	@ 0x28
 8001162:	f001 fa8a 	bl	800267a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001166:	2028      	movs	r0, #40	@ 0x28
 8001168:	f001 faa3 	bl	80026b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020400 	.word	0x40020400
 8001180:	40020000 	.word	0x40020000

08001184 <RGB_LED_Color>:
 * @param: color value, can be any value in @RGB_LED_COLORS
 *
 * @return: None
 */
void RGB_LED_Color(uint8_t color)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	switch (color)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b07      	cmp	r3, #7
 8001192:	f200 80ab 	bhi.w	80012ec <RGB_LED_Color+0x168>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <RGB_LED_Color+0x18>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011bd 	.word	0x080011bd
 80011a0:	080011e3 	.word	0x080011e3
 80011a4:	08001209 	.word	0x08001209
 80011a8:	0800122f 	.word	0x0800122f
 80011ac:	0800127b 	.word	0x0800127b
 80011b0:	080012a1 	.word	0x080012a1
 80011b4:	08001255 	.word	0x08001255
 80011b8:	080012c7 	.word	0x080012c7
	{
	case RGB_LED_OFF:
		HAL_GPIO_WritePin(GPIOA, REG_LED_R_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011c2:	484c      	ldr	r0, [pc, #304]	@ (80012f4 <RGB_LED_Color+0x170>)
 80011c4:	f001 fc24 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_G_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ce:	4849      	ldr	r0, [pc, #292]	@ (80012f4 <RGB_LED_Color+0x170>)
 80011d0:	f001 fc1e 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011da:	4846      	ldr	r0, [pc, #280]	@ (80012f4 <RGB_LED_Color+0x170>)
 80011dc:	f001 fc18 	bl	8002a10 <HAL_GPIO_WritePin>
		break;
 80011e0:	e084      	b.n	80012ec <RGB_LED_Color+0x168>
	case RGB_LED_RED:
		HAL_GPIO_WritePin(GPIOA, REG_LED_R_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e8:	4842      	ldr	r0, [pc, #264]	@ (80012f4 <RGB_LED_Color+0x170>)
 80011ea:	f001 fc11 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_G_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011f4:	483f      	ldr	r0, [pc, #252]	@ (80012f4 <RGB_LED_Color+0x170>)
 80011f6:	f001 fc0b 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001200:	483c      	ldr	r0, [pc, #240]	@ (80012f4 <RGB_LED_Color+0x170>)
 8001202:	f001 fc05 	bl	8002a10 <HAL_GPIO_WritePin>
		break;
 8001206:	e071      	b.n	80012ec <RGB_LED_Color+0x168>
	case RGB_LED_GREEN:
		HAL_GPIO_WritePin(GPIOA, REG_LED_R_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800120e:	4839      	ldr	r0, [pc, #228]	@ (80012f4 <RGB_LED_Color+0x170>)
 8001210:	f001 fbfe 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_G_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800121a:	4836      	ldr	r0, [pc, #216]	@ (80012f4 <RGB_LED_Color+0x170>)
 800121c:	f001 fbf8 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001226:	4833      	ldr	r0, [pc, #204]	@ (80012f4 <RGB_LED_Color+0x170>)
 8001228:	f001 fbf2 	bl	8002a10 <HAL_GPIO_WritePin>
		break;
 800122c:	e05e      	b.n	80012ec <RGB_LED_Color+0x168>
	case RGB_LED_BLUE:
		HAL_GPIO_WritePin(GPIOA, REG_LED_R_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001234:	482f      	ldr	r0, [pc, #188]	@ (80012f4 <RGB_LED_Color+0x170>)
 8001236:	f001 fbeb 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_G_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001240:	482c      	ldr	r0, [pc, #176]	@ (80012f4 <RGB_LED_Color+0x170>)
 8001242:	f001 fbe5 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800124c:	4829      	ldr	r0, [pc, #164]	@ (80012f4 <RGB_LED_Color+0x170>)
 800124e:	f001 fbdf 	bl	8002a10 <HAL_GPIO_WritePin>
		break;
 8001252:	e04b      	b.n	80012ec <RGB_LED_Color+0x168>
	case RGB_LED_CYAN:
		HAL_GPIO_WritePin(GPIOA, REG_LED_R_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800125a:	4826      	ldr	r0, [pc, #152]	@ (80012f4 <RGB_LED_Color+0x170>)
 800125c:	f001 fbd8 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_G_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001266:	4823      	ldr	r0, [pc, #140]	@ (80012f4 <RGB_LED_Color+0x170>)
 8001268:	f001 fbd2 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001272:	4820      	ldr	r0, [pc, #128]	@ (80012f4 <RGB_LED_Color+0x170>)
 8001274:	f001 fbcc 	bl	8002a10 <HAL_GPIO_WritePin>
		break;
 8001278:	e038      	b.n	80012ec <RGB_LED_Color+0x168>
	case RGB_LED_PURPLE:
		HAL_GPIO_WritePin(GPIOA, REG_LED_R_Pin, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001280:	481c      	ldr	r0, [pc, #112]	@ (80012f4 <RGB_LED_Color+0x170>)
 8001282:	f001 fbc5 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_G_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128c:	4819      	ldr	r0, [pc, #100]	@ (80012f4 <RGB_LED_Color+0x170>)
 800128e:	f001 fbbf 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001298:	4816      	ldr	r0, [pc, #88]	@ (80012f4 <RGB_LED_Color+0x170>)
 800129a:	f001 fbb9 	bl	8002a10 <HAL_GPIO_WritePin>
		break;
 800129e:	e025      	b.n	80012ec <RGB_LED_Color+0x168>
	case RGB_LED_YELLOW:
		HAL_GPIO_WritePin(GPIOA, REG_LED_R_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012a6:	4813      	ldr	r0, [pc, #76]	@ (80012f4 <RGB_LED_Color+0x170>)
 80012a8:	f001 fbb2 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_G_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012b2:	4810      	ldr	r0, [pc, #64]	@ (80012f4 <RGB_LED_Color+0x170>)
 80012b4:	f001 fbac 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012be:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <RGB_LED_Color+0x170>)
 80012c0:	f001 fba6 	bl	8002a10 <HAL_GPIO_WritePin>
		break;
 80012c4:	e012      	b.n	80012ec <RGB_LED_Color+0x168>
	case RGB_LED_WHITE:
		HAL_GPIO_WritePin(GPIOA, REG_LED_R_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012cc:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <RGB_LED_Color+0x170>)
 80012ce:	f001 fb9f 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_G_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d8:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <RGB_LED_Color+0x170>)
 80012da:	f001 fb99 	bl	8002a10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, REG_LED_B_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <RGB_LED_Color+0x170>)
 80012e6:	f001 fb93 	bl	8002a10 <HAL_GPIO_WritePin>
		break;
 80012ea:	bf00      	nop
	}
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020000 	.word	0x40020000

080012f8 <PID_Loop>:

uint8_t PID_Loop(uint16_t setpoint)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
	int16_t error, output;

	// Calculate the PID terms
	error = setpoint - oven_temp;
 8001302:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <PID_Loop+0xcc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	88fa      	ldrh	r2, [r7, #6]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	81bb      	strh	r3, [r7, #12]
	integral = integral + (error * interval);
 8001310:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001314:	4a2c      	ldr	r2, [pc, #176]	@ (80013c8 <PID_Loop+0xd0>)
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	fb03 f202 	mul.w	r2, r3, r2
 800131c:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <PID_Loop+0xd4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
 8001322:	4a2a      	ldr	r2, [pc, #168]	@ (80013cc <PID_Loop+0xd4>)
 8001324:	6013      	str	r3, [r2, #0]
	derivative = (error - error_prev) / interval;
 8001326:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800132a:	4a29      	ldr	r2, [pc, #164]	@ (80013d0 <PID_Loop+0xd8>)
 800132c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	4a25      	ldr	r2, [pc, #148]	@ (80013c8 <PID_Loop+0xd0>)
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	fb93 f3f2 	sdiv	r3, r3, r2
 800133a:	4a26      	ldr	r2, [pc, #152]	@ (80013d4 <PID_Loop+0xdc>)
 800133c:	6013      	str	r3, [r2, #0]

	output = (k_p * error) + (k_i * integral) + (k_d * derivative);
 800133e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134a:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <PID_Loop+0xe0>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <PID_Loop+0xd4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <PID_Loop+0xe4>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800136e:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <PID_Loop+0xdc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <PID_Loop+0xe8>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138c:	ee17 3a90 	vmov	r3, s15
 8001390:	81fb      	strh	r3, [r7, #14]

	//printf("temp: %lu	error: %d	integral: %ld, deritavtive: %ld ", oven_temp, error, integral, derivative);

	if (output > 100)
 8001392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	dd02      	ble.n	80013a0 <PID_Loop+0xa8>
		output = 100;
 800139a:	2364      	movs	r3, #100	@ 0x64
 800139c:	81fb      	strh	r3, [r7, #14]
 800139e:	e005      	b.n	80013ac <PID_Loop+0xb4>
	else if (output < 0)
 80013a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da01      	bge.n	80013ac <PID_Loop+0xb4>
		output = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	81fb      	strh	r3, [r7, #14]
	//printf("output: %d\n", output);

	// Save value for next iteration
	error_prev = error;
 80013ac:	4a08      	ldr	r2, [pc, #32]	@ (80013d0 <PID_Loop+0xd8>)
 80013ae:	89bb      	ldrh	r3, [r7, #12]
 80013b0:	8013      	strh	r3, [r2, #0]

	return (uint8_t)output;
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	200001c4 	.word	0x200001c4
 80013c8:	20000008 	.word	0x20000008
 80013cc:	200001d0 	.word	0x200001d0
 80013d0:	200001d8 	.word	0x200001d8
 80013d4:	200001d4 	.word	0x200001d4
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000004 	.word	0x20000004
 80013e0:	200001cc 	.word	0x200001cc

080013e4 <control_oven>:

void control_oven(int8_t oven_duty_cycle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	if (oven_duty_cycle > 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dd06      	ble.n	8001404 <control_oven+0x20>
	{
		HAL_GPIO_WritePin(GPIOA, SSR_Pin, GPIO_PIN_SET);	// Turn on SSR
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013fc:	4808      	ldr	r0, [pc, #32]	@ (8001420 <control_oven+0x3c>)
 80013fe:	f001 fb07 	bl	8002a10 <HAL_GPIO_WritePin>
 8001402:	e005      	b.n	8001410 <control_oven+0x2c>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, SSR_Pin, GPIO_PIN_RESET);	// Turn off SSR
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800140a:	4805      	ldr	r0, [pc, #20]	@ (8001420 <control_oven+0x3c>)
 800140c:	f001 fb00 	bl	8002a10 <HAL_GPIO_WritePin>
	}
	oven_duty = oven_duty_cycle;
 8001410:	79fa      	ldrb	r2, [r7, #7]
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <control_oven+0x40>)
 8001414:	701a      	strb	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40020000 	.word	0x40020000
 8001424:	200001df 	.word	0x200001df

08001428 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a32      	ldr	r2, [pc, #200]	@ (8001500 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12d      	bne.n	8001496 <HAL_ADC_ConvCpltCallback+0x6e>
	{
		// Thermocouple Measurement complete
		oven_temp = (0.0668*HAL_ADC_GetValue(hadc) -3) + ambient_temp;
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fde8 	bl	8002010 <HAL_ADC_GetValue>
 8001440:	4603      	mov	r3, r0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f94c 	bl	80006e0 <__aeabi_ui2d>
 8001448:	a327      	add	r3, pc, #156	@ (adr r3, 80014e8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7fe fedb 	bl	8000208 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001460:	f7ff f800 	bl	8000464 <__aeabi_dsub>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <HAL_ADC_ConvCpltCallback+0xe0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f935 	bl	80006e0 <__aeabi_ui2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4620      	mov	r0, r4
 800147c:	4629      	mov	r1, r5
 800147e:	f7fe fff3 	bl	8000468 <__adddf3>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff f9a3 	bl	80007d4 <__aeabi_d2uiz>
 800148e:	4603      	mov	r3, r0
 8001490:	4a1e      	ldr	r2, [pc, #120]	@ (800150c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001492:	6013      	str	r3, [r2, #0]
		ambient_temp = (uint32_t)(((42.57 / 4095) * HAL_ADC_GetValue(hadc)) + 8.708);
#ifdef DEBUG_PRINT
		//printf("Ambient Temperature %lu C\n", ambient_temp);
#endif
	}
}
 8001494:	e022      	b.n	80014dc <HAL_ADC_ConvCpltCallback+0xb4>
	else if (hadc->Instance == ADC2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_ADC_ConvCpltCallback+0xe8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d11d      	bne.n	80014dc <HAL_ADC_ConvCpltCallback+0xb4>
		ambient_temp = (uint32_t)(((42.57 / 4095) * HAL_ADC_GetValue(hadc)) + 8.708);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fdb5 	bl	8002010 <HAL_ADC_GetValue>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f919 	bl	80006e0 <__aeabi_ui2d>
 80014ae:	a310      	add	r3, pc, #64	@ (adr r3, 80014f0 <HAL_ADC_ConvCpltCallback+0xc8>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7fe fea8 	bl	8000208 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	a30d      	add	r3, pc, #52	@ (adr r3, 80014f8 <HAL_ADC_ConvCpltCallback+0xd0>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7fe ffcf 	bl	8000468 <__adddf3>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff f97f 	bl	80007d4 <__aeabi_d2uiz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_ADC_ConvCpltCallback+0xe0>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	f3af 8000 	nop.w
 80014e8:	075f6fd2 	.word	0x075f6fd2
 80014ec:	3fb119ce 	.word	0x3fb119ce
 80014f0:	6735cf86 	.word	0x6735cf86
 80014f4:	3f854a4a 	.word	0x3f854a4a
 80014f8:	f9db22d1 	.word	0xf9db22d1
 80014fc:	40216a7e 	.word	0x40216a7e
 8001500:	40012000 	.word	0x40012000
 8001504:	40080000 	.word	0x40080000
 8001508:	200001c0 	.word	0x200001c0
 800150c:	200001c4 	.word	0x200001c4
 8001510:	40012100 	.word	0x40012100

08001514 <oven_task>:

void oven_task(uint16_t setpoint)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
	  if (zero_crossing_count == oven_duty)
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <oven_task+0x78>)
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <oven_task+0x7c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d105      	bne.n	8001536 <oven_task+0x22>
	  {
		  HAL_GPIO_WritePin(GPIOA, SSR_Pin, GPIO_PIN_RESET);	// Turn off SSR
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001530:	4818      	ldr	r0, [pc, #96]	@ (8001594 <oven_task+0x80>)
 8001532:	f001 fa6d 	bl	8002a10 <HAL_GPIO_WritePin>
	  }

	  if (zero_crossing_count >= 99)
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <oven_task+0x78>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b62      	cmp	r3, #98	@ 0x62
 800153c:	d922      	bls.n	8001584 <oven_task+0x70>
	  {
		  zero_crossing_count = 0;	// Reset counter
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <oven_task+0x78>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		  if(time_counter_enable)
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <oven_task+0x84>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <oven_task+0x44>
		  {
			  seconds_count++;		// Increase seconds counter
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <oven_task+0x88>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <oven_task+0x88>)
 8001556:	801a      	strh	r2, [r3, #0]
		  }
		  HAL_ADC_Start_IT(&hadc2); // Start a conversion on ADC1 (Thermistor)
 8001558:	4811      	ldr	r0, [pc, #68]	@ (80015a0 <oven_task+0x8c>)
 800155a:	f000 fb6b 	bl	8001c34 <HAL_ADC_Start_IT>
		  HAL_ADC_Start_IT(&hadc1); // Start a conversion on ADC2 (Thermocouple)
 800155e:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <oven_task+0x90>)
 8001560:	f000 fb68 	bl	8001c34 <HAL_ADC_Start_IT>

#ifdef DEBUG_PRINT
		  printf("%lu\n", oven_temp);
#endif

		  if (setpoint > 0)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <oven_task+0x6a>
		  {
			  control_oven(PID_Loop(setpoint)); // Regulate Oven's output
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fec3 	bl	80012f8 <PID_Loop>
 8001572:	4603      	mov	r3, r0
 8001574:	b25b      	sxtb	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff34 	bl	80013e4 <control_oven>
		  else
		  {
			  control_oven(0);
		  }
	  }
}
 800157c:	e002      	b.n	8001584 <oven_task+0x70>
			  control_oven(0);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff ff30 	bl	80013e4 <control_oven>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200001de 	.word	0x200001de
 8001590:	200001df 	.word	0x200001df
 8001594:	40020000 	.word	0x40020000
 8001598:	200001da 	.word	0x200001da
 800159c:	200001dc 	.word	0x200001dc
 80015a0:	20000080 	.word	0x20000080
 80015a4:	20000038 	.word	0x20000038

080015a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
	// Zero cross detection interrupt
	if (GPIO_Pin == ZERO_CROSS_Pin)
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015b8:	d106      	bne.n	80015c8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		zero_crossing_count++;
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_GPIO_EXTI_Callback+0x54>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_GPIO_EXTI_Callback+0x54>)
 80015c4:	701a      	strb	r2, [r3, #0]
	else if (GPIO_Pin == BTN2_Pin)
	{
		state = IDLE;
		time_counter_enable = 0;
	}
}
 80015c6:	e012      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x46>
	else if (GPIO_Pin == BTN1_Pin)
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d106      	bne.n	80015dc <HAL_GPIO_EXTI_Callback+0x34>
		state = PREHEAT;	// change state machine to pre-heat so reflow starts
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <HAL_GPIO_EXTI_Callback+0x58>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
		time_counter_enable = 1;
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_GPIO_EXTI_Callback+0x5c>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
}
 80015da:	e008      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x46>
	else if (GPIO_Pin == BTN2_Pin)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d105      	bne.n	80015ee <HAL_GPIO_EXTI_Callback+0x46>
		state = IDLE;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <HAL_GPIO_EXTI_Callback+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
		time_counter_enable = 0;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_GPIO_EXTI_Callback+0x5c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200001de 	.word	0x200001de
 8001600:	200001c8 	.word	0x200001c8
 8001604:	200001da 	.word	0x200001da

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_MspInit+0x4c>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001652:	2007      	movs	r0, #7
 8001654:	f001 f806 	bl	8002664 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	@ 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a36      	ldr	r2, [pc, #216]	@ (800175c <HAL_ADC_MspInit+0xf8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d130      	bne.n	80016e8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	4b35      	ldr	r3, [pc, #212]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a34      	ldr	r2, [pc, #208]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b32      	ldr	r3, [pc, #200]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = OVEN_TEMP_Pin;
 80016be:	2301      	movs	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(OVEN_TEMP_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4824      	ldr	r0, [pc, #144]	@ (8001764 <HAL_ADC_MspInit+0x100>)
 80016d2:	f001 f809 	bl	80026e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2012      	movs	r0, #18
 80016dc:	f000 ffcd 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016e0:	2012      	movs	r0, #18
 80016e2:	f000 ffe6 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016e6:	e034      	b.n	8001752 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001768 <HAL_ADC_MspInit+0x104>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12f      	bne.n	8001752 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 80016fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a12      	ldr	r2, [pc, #72]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <HAL_ADC_MspInit+0xfc>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin;
 800172a:	2302      	movs	r3, #2
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(AMBIENT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4809      	ldr	r0, [pc, #36]	@ (8001764 <HAL_ADC_MspInit+0x100>)
 800173e:	f000 ffd3 	bl	80026e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2012      	movs	r0, #18
 8001748:	f000 ff97 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800174c:	2012      	movs	r0, #18
 800174e:	f000 ffb0 	bl	80026b2 <HAL_NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3730      	adds	r7, #48	@ 0x30
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40012000 	.word	0x40012000
 8001760:	40023800 	.word	0x40023800
 8001764:	40020000 	.word	0x40020000
 8001768:	40012100 	.word	0x40012100

0800176c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a42      	ldr	r2, [pc, #264]	@ (8001894 <HAL_SPI_MspInit+0x128>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12d      	bne.n	80017ea <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a40      	ldr	r2, [pc, #256]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b3e      	ldr	r3, [pc, #248]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a39      	ldr	r2, [pc, #228]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b37      	ldr	r3, [pc, #220]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISP_SCK_Pin|DISP_MISO_Pin|DISP_MOSI_Pin;
 80017c6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d8:	2305      	movs	r3, #5
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	482e      	ldr	r0, [pc, #184]	@ (800189c <HAL_SPI_MspInit+0x130>)
 80017e4:	f000 ff80 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017e8:	e04f      	b.n	800188a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2c      	ldr	r2, [pc, #176]	@ (80018a0 <HAL_SPI_MspInit+0x134>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d14a      	bne.n	800188a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	4a26      	ldr	r2, [pc, #152]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 80017fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001802:	6413      	str	r3, [r2, #64]	@ 0x40
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	4a1f      	ldr	r2, [pc, #124]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6313      	str	r3, [r2, #48]	@ 0x30
 800183c:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <HAL_SPI_MspInit+0x12c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MOSI_Pin;
 8001848:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800185a:	2306      	movs	r3, #6
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	480f      	ldr	r0, [pc, #60]	@ (80018a4 <HAL_SPI_MspInit+0x138>)
 8001866:	f000 ff3f 	bl	80026e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_MISO_Pin;
 800186a:	2310      	movs	r3, #16
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800187a:	2306      	movs	r3, #6
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	@ (800189c <HAL_SPI_MspInit+0x130>)
 8001886:	f000 ff2f 	bl	80026e8 <HAL_GPIO_Init>
}
 800188a:	bf00      	nop
 800188c:	3730      	adds	r7, #48	@ 0x30
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40003800 	.word	0x40003800
 8001898:	40023800 	.word	0x40023800
 800189c:	40020400 	.word	0x40020400
 80018a0:	40003c00 	.word	0x40003c00
 80018a4:	40020800 	.word	0x40020800

080018a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	@ (80018e4 <HAL_TIM_Base_MspInit+0x3c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10d      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ca:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <HAL_TIM_MspPostInit+0x68>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d11e      	bne.n	800194c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_TIM_MspPostInit+0x6c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a10      	ldr	r2, [pc, #64]	@ (8001958 <HAL_TIM_MspPostInit+0x6c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <HAL_TIM_MspPostInit+0x6c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800192a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800192e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800193c:	2301      	movs	r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4619      	mov	r1, r3
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <HAL_TIM_MspPostInit+0x70>)
 8001948:	f000 fece 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40010000 	.word	0x40010000
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000

08001960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <NMI_Handler+0x4>

08001968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <MemManage_Handler+0x4>

08001978 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <UsageFault_Handler+0x4>

08001988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b6:	f000 f8b5 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}

080019be <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 80019c2:	2004      	movs	r0, #4
 80019c4:	f001 f83e 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80019d0:	2008      	movs	r0, #8
 80019d2:	f001 f837 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019e0:	4803      	ldr	r0, [pc, #12]	@ (80019f0 <ADC_IRQHandler+0x14>)
 80019e2:	f000 fa05 	bl	8001df0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80019e6:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <ADC_IRQHandler+0x18>)
 80019e8:	f000 fa02 	bl	8001df0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000038 	.word	0x20000038
 80019f4:	20000080 	.word	0x20000080

080019f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZERO_CROSS_Pin);
 80019fc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a00:	f001 f820 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <SystemInit+0x20>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <SystemInit+0x20>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a30:	f7ff ffea 	bl	8001a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a36:	490d      	ldr	r1, [pc, #52]	@ (8001a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f002 fda5 	bl	80045a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5e:	f7ff f851 	bl	8000b04 <main>
  bx  lr    
 8001a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a6c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001a70:	08004628 	.word	0x08004628
  ldr r2, =_sbss
 8001a74:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001a78:	200001e4 	.word	0x200001e4

08001a7c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <CAN1_RX0_IRQHandler>
	...

08001a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac0 <HAL_Init+0x40>)
 8001a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <HAL_Init+0x40>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <HAL_Init+0x40>)
 8001aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 fddb 	bl	8002664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 f808 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab4:	f7ff fdae 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fdf3 	bl	80026ce <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 fdbb 	bl	800267a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000010 	.word	0x20000010
 8001b1c:	20000018 	.word	0x20000018
 8001b20:	20000014 	.word	0x20000014

08001b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000018 	.word	0x20000018
 8001b48:	200001e0 	.word	0x200001e0

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	200001e0 	.word	0x200001e0

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff ffee 	bl	8001b4c <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d005      	beq.n	8001b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_Delay+0x44>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ffde 	bl	8001b4c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8f7      	bhi.n	8001b8c <HAL_Delay+0x28>
  {
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000018 	.word	0x20000018

08001bac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e033      	b.n	8001c2a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fd4a 	bl	8001664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d118      	bne.n	8001c1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bf2:	f023 0302 	bic.w	r3, r3, #2
 8001bf6:	f043 0202 	orr.w	r2, r3, #2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fb5a 	bl	80022b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c1a:	e001      	b.n	8001c20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Start_IT+0x1a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e0bd      	b.n	8001dca <HAL_ADC_Start_IT+0x196>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d018      	beq.n	8001c96 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c74:	4b58      	ldr	r3, [pc, #352]	@ (8001dd8 <HAL_ADC_Start_IT+0x1a4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a58      	ldr	r2, [pc, #352]	@ (8001ddc <HAL_ADC_Start_IT+0x1a8>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9a      	lsrs	r2, r3, #18
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c88:	e002      	b.n	8001c90 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f9      	bne.n	8001c8a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f040 8085 	bne.w	8001db0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f023 0206 	bic.w	r2, r3, #6
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cf2:	e002      	b.n	8001cfa <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d02:	4b37      	ldr	r3, [pc, #220]	@ (8001de0 <HAL_ADC_Start_IT+0x1ac>)
 8001d04:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d1e:	f043 0320 	orr.w	r3, r3, #32
 8001d22:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d12a      	bne.n	8001d86 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	@ (8001de4 <HAL_ADC_Start_IT+0x1b0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d015      	beq.n	8001d66 <HAL_ADC_Start_IT+0x132>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <HAL_ADC_Start_IT+0x1b4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_Start_IT+0x11c>
 8001d44:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <HAL_ADC_Start_IT+0x1ac>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a25      	ldr	r2, [pc, #148]	@ (8001dec <HAL_ADC_Start_IT+0x1b8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d136      	bne.n	8001dc8 <HAL_ADC_Start_IT+0x194>
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_ADC_Start_IT+0x1ac>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d130      	bne.n	8001dc8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d129      	bne.n	8001dc8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e020      	b.n	8001dc8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a16      	ldr	r2, [pc, #88]	@ (8001de4 <HAL_ADC_Start_IT+0x1b0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_ADC_Start_IT+0x194>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d114      	bne.n	8001dc8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	e00b      	b.n	8001dc8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000010 	.word	0x20000010
 8001ddc:	431bde83 	.word	0x431bde83
 8001de0:	40012300 	.word	0x40012300
 8001de4:	40012000 	.word	0x40012000
 8001de8:	40012100 	.word	0x40012100
 8001dec:	40012200 	.word	0x40012200

08001df0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d049      	beq.n	8001eba <HAL_ADC_IRQHandler+0xca>
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d046      	beq.n	8001eba <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d12b      	bne.n	8001eaa <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d127      	bne.n	8001eaa <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d119      	bne.n	8001eaa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0220 	bic.w	r2, r2, #32
 8001e84:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fabc 	bl	8001428 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0212 	mvn.w	r2, #18
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d057      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x190>
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d054      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d139      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f02:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d12b      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d124      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d11d      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d119      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f4a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fa9d 	bl	80024b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f06f 020c 	mvn.w	r2, #12
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d017      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0x1d6>
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d014      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f837 	bl	800202a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0201 	mvn.w	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fd4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <HAL_ADC_IRQHandler+0x218>
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f043 0202 	orr.w	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0220 	mvn.w	r2, #32
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f820 	bl	800203e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f06f 0220 	mvn.w	r2, #32
 8002006:	601a      	str	r2, [r3, #0]
  }
}
 8002008:	bf00      	nop
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e113      	b.n	8002298 <HAL_ADC_ConfigChannel+0x244>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d925      	bls.n	80020cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3b1e      	subs	r3, #30
 8002096:	2207      	movs	r2, #7
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68d9      	ldr	r1, [r3, #12]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4403      	add	r3, r0
 80020be:	3b1e      	subs	r3, #30
 80020c0:	409a      	lsls	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	e022      	b.n	8002112 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	2207      	movs	r2, #7
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	400a      	ands	r2, r1
 80020ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	4603      	mov	r3, r0
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4403      	add	r3, r0
 8002108:	409a      	lsls	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b06      	cmp	r3, #6
 8002118:	d824      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b05      	subs	r3, #5
 800212c:	221f      	movs	r2, #31
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b05      	subs	r3, #5
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	@ 0x34
 8002162:	e04c      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	d824      	bhi.n	80021b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b23      	subs	r3, #35	@ 0x23
 800217e:	221f      	movs	r2, #31
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43da      	mvns	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	400a      	ands	r2, r1
 800218c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b23      	subs	r3, #35	@ 0x23
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80021b4:	e023      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b41      	subs	r3, #65	@ 0x41
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b41      	subs	r3, #65	@ 0x41
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_ADC_ConfigChannel+0x250>)
 8002200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a28      	ldr	r2, [pc, #160]	@ (80022a8 <HAL_ADC_ConfigChannel+0x254>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d10f      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1d8>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d10b      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1d      	ldr	r2, [pc, #116]	@ (80022a8 <HAL_ADC_ConfigChannel+0x254>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d12b      	bne.n	800228e <HAL_ADC_ConfigChannel+0x23a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1c      	ldr	r2, [pc, #112]	@ (80022ac <HAL_ADC_ConfigChannel+0x258>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x1f4>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b11      	cmp	r3, #17
 8002246:	d122      	bne.n	800228e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a11      	ldr	r2, [pc, #68]	@ (80022ac <HAL_ADC_ConfigChannel+0x258>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d111      	bne.n	800228e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226a:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_ADC_ConfigChannel+0x25c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <HAL_ADC_ConfigChannel+0x260>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	0c9a      	lsrs	r2, r3, #18
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002280:	e002      	b.n	8002288 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40012300 	.word	0x40012300
 80022a8:	40012000 	.word	0x40012000
 80022ac:	10000012 	.word	0x10000012
 80022b0:	20000010 	.word	0x20000010
 80022b4:	431bde83 	.word	0x431bde83

080022b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c0:	4b79      	ldr	r3, [pc, #484]	@ (80024a8 <ADC_Init+0x1f0>)
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234a:	4a58      	ldr	r2, [pc, #352]	@ (80024ac <ADC_Init+0x1f4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800235e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	e00f      	b.n	80023b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0202 	bic.w	r2, r2, #2
 80023c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7e1b      	ldrb	r3, [r3, #24]
 80023d0:	005a      	lsls	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01b      	beq.n	800241c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002402:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	3b01      	subs	r3, #1
 8002410:	035a      	lsls	r2, r3, #13
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	e007      	b.n	800242c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800242a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	3b01      	subs	r3, #1
 8002448:	051a      	lsls	r2, r3, #20
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800246e:	025a      	lsls	r2, r3, #9
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	029a      	lsls	r2, r3, #10
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40012300 	.word	0x40012300
 80024ac:	0f000001 	.word	0x0f000001

080024b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e0:	4013      	ands	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f6:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60d3      	str	r3, [r2, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002510:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <__NVIC_GetPriorityGrouping+0x18>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	f003 0307 	and.w	r3, r3, #7
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	2b00      	cmp	r3, #0
 8002538:	db0b      	blt.n	8002552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	4907      	ldr	r1, [pc, #28]	@ (8002560 <__NVIC_EnableIRQ+0x38>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2001      	movs	r0, #1
 800254a:	fa00 f202 	lsl.w	r2, r0, r2
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000e100 	.word	0xe000e100

08002564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	db0a      	blt.n	800258e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	490c      	ldr	r1, [pc, #48]	@ (80025b0 <__NVIC_SetPriority+0x4c>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	440b      	add	r3, r1
 8002588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800258c:	e00a      	b.n	80025a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4908      	ldr	r1, [pc, #32]	@ (80025b4 <__NVIC_SetPriority+0x50>)
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	3b04      	subs	r3, #4
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	440b      	add	r3, r1
 80025a2:	761a      	strb	r2, [r3, #24]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000e100 	.word	0xe000e100
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	@ 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f1c3 0307 	rsb	r3, r3, #7
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	bf28      	it	cs
 80025d6:	2304      	movcs	r3, #4
 80025d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3304      	adds	r3, #4
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d902      	bls.n	80025e8 <NVIC_EncodePriority+0x30>
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3b03      	subs	r3, #3
 80025e6:	e000      	b.n	80025ea <NVIC_EncodePriority+0x32>
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	401a      	ands	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43d9      	mvns	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	4313      	orrs	r3, r2
         );
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	@ 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002630:	d301      	bcc.n	8002636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002632:	2301      	movs	r3, #1
 8002634:	e00f      	b.n	8002656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <SysTick_Config+0x40>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263e:	210f      	movs	r1, #15
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f7ff ff8e 	bl	8002564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002648:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <SysTick_Config+0x40>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264e:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <SysTick_Config+0x40>)
 8002650:	2207      	movs	r2, #7
 8002652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	e000e010 	.word	0xe000e010

08002664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff29 	bl	80024c4 <__NVIC_SetPriorityGrouping>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff3e 	bl	800250c <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff8e 	bl	80025b8 <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5d 	bl	8002564 <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff31 	bl	8002528 <__NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa2 	bl	8002620 <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	@ 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e165      	b.n	80029d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	f040 8154 	bne.w	80029ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d005      	beq.n	800273a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002736:	2b02      	cmp	r3, #2
 8002738:	d130      	bne.n	800279c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 0201 	and.w	r2, r3, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d017      	beq.n	80027d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d123      	bne.n	800282c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	08da      	lsrs	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3208      	adds	r2, #8
 8002826:	69b9      	ldr	r1, [r7, #24]
 8002828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80ae 	beq.w	80029ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b5d      	ldr	r3, [pc, #372]	@ (80029e8 <HAL_GPIO_Init+0x300>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	4a5c      	ldr	r2, [pc, #368]	@ (80029e8 <HAL_GPIO_Init+0x300>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800287c:	6453      	str	r3, [r2, #68]	@ 0x44
 800287e:	4b5a      	ldr	r3, [pc, #360]	@ (80029e8 <HAL_GPIO_Init+0x300>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800288a:	4a58      	ldr	r2, [pc, #352]	@ (80029ec <HAL_GPIO_Init+0x304>)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4f      	ldr	r2, [pc, #316]	@ (80029f0 <HAL_GPIO_Init+0x308>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d025      	beq.n	8002902 <HAL_GPIO_Init+0x21a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4e      	ldr	r2, [pc, #312]	@ (80029f4 <HAL_GPIO_Init+0x30c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01f      	beq.n	80028fe <HAL_GPIO_Init+0x216>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4d      	ldr	r2, [pc, #308]	@ (80029f8 <HAL_GPIO_Init+0x310>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_GPIO_Init+0x212>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4c      	ldr	r2, [pc, #304]	@ (80029fc <HAL_GPIO_Init+0x314>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x20e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a00 <HAL_GPIO_Init+0x318>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x20a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002a04 <HAL_GPIO_Init+0x31c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x206>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a49      	ldr	r2, [pc, #292]	@ (8002a08 <HAL_GPIO_Init+0x320>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x202>
 80028e6:	2306      	movs	r3, #6
 80028e8:	e00c      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00a      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028ee:	2305      	movs	r3, #5
 80028f0:	e008      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 8002902:	2300      	movs	r3, #0
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f002 0203 	and.w	r2, r2, #3
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4093      	lsls	r3, r2
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002914:	4935      	ldr	r1, [pc, #212]	@ (80029ec <HAL_GPIO_Init+0x304>)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002922:	4b3a      	ldr	r3, [pc, #232]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002946:	4a31      	ldr	r2, [pc, #196]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800294c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002970:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002976:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c4:	4a11      	ldr	r2, [pc, #68]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	f67f ae96 	bls.w	8002704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40013800 	.word	0x40013800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40021400 	.word	0x40021400
 8002a08:	40021800 	.word	0x40021800
 8002a0c:	40013c00 	.word	0x40013c00

08002a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a20:	787b      	ldrb	r3, [r7, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a2c:	e003      	b.n	8002a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a2e:	887b      	ldrh	r3, [r7, #2]
 8002a30:	041a      	lsls	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	619a      	str	r2, [r3, #24]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a5a:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fda0 	bl	80015a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40013c00 	.word	0x40013c00

08002a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0cc      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a88:	4b68      	ldr	r3, [pc, #416]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d90c      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b65      	ldr	r3, [pc, #404]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b63      	ldr	r3, [pc, #396]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0b8      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac8:	4b59      	ldr	r3, [pc, #356]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a58      	ldr	r2, [pc, #352]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae0:	4b53      	ldr	r3, [pc, #332]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a52      	ldr	r2, [pc, #328]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b50      	ldr	r3, [pc, #320]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	494d      	ldr	r1, [pc, #308]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d044      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b47      	ldr	r3, [pc, #284]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d119      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e07f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b42:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e067      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b52:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4934      	ldr	r1, [pc, #208]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b64:	f7fe fff2 	bl	8001b4c <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7fe ffee 	bl	8001b4c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e04f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 020c 	and.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1eb      	bne.n	8002b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d20c      	bcs.n	8002bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b22      	ldr	r3, [pc, #136]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e032      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4916      	ldr	r1, [pc, #88]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	490e      	ldr	r1, [pc, #56]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bfa:	f000 f821 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	490a      	ldr	r1, [pc, #40]	@ (8002c34 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	5ccb      	ldrb	r3, [r1, r3]
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff52 	bl	8001ac4 <HAL_InitTick>

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023c00 	.word	0x40023c00
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08004608 	.word	0x08004608
 8002c38:	20000010 	.word	0x20000010
 8002c3c:	20000014 	.word	0x20000014

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b0ae      	sub	sp, #184	@ 0xb8
 8002c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4bcb      	ldr	r3, [pc, #812]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	f200 8206 	bhi.w	8003080 <HAL_RCC_GetSysClockFreq+0x440>
 8002c74:	a201      	add	r2, pc, #4	@ (adr r2, 8002c7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08003081 	.word	0x08003081
 8002c84:	08003081 	.word	0x08003081
 8002c88:	08003081 	.word	0x08003081
 8002c8c:	08002cb9 	.word	0x08002cb9
 8002c90:	08003081 	.word	0x08003081
 8002c94:	08003081 	.word	0x08003081
 8002c98:	08003081 	.word	0x08003081
 8002c9c:	08002cc1 	.word	0x08002cc1
 8002ca0:	08003081 	.word	0x08003081
 8002ca4:	08003081 	.word	0x08003081
 8002ca8:	08003081 	.word	0x08003081
 8002cac:	08002eb1 	.word	0x08002eb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4bb9      	ldr	r3, [pc, #740]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002cb6:	e1e7      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cb8:	4bb8      	ldr	r3, [pc, #736]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cbe:	e1e3      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4bb4      	ldr	r3, [pc, #720]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ccc:	4bb1      	ldr	r3, [pc, #708]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d071      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4bae      	ldr	r3, [pc, #696]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ce4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cfe:	4622      	mov	r2, r4
 8002d00:	462b      	mov	r3, r5
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4621      	mov	r1, r4
 8002d18:	1a51      	subs	r1, r2, r1
 8002d1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d30:	4649      	mov	r1, r9
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	018a      	lsls	r2, r1, #6
 8002d3e:	4641      	mov	r1, r8
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d44:	4649      	mov	r1, r9
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d58:	4649      	mov	r1, r9
 8002d5a:	00cb      	lsls	r3, r1, #3
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d62:	4641      	mov	r1, r8
 8002d64:	00ca      	lsls	r2, r1, #3
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d72:	462b      	mov	r3, r5
 8002d74:	460a      	mov	r2, r1
 8002d76:	eb42 0303 	adc.w	r3, r2, r3
 8002d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d88:	4629      	mov	r1, r5
 8002d8a:	024b      	lsls	r3, r1, #9
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d92:	4621      	mov	r1, r4
 8002d94:	024a      	lsls	r2, r1, #9
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002da4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002da8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002dac:	f7fd fd32 	bl	8000814 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dba:	e067      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbc:	4b75      	ldr	r3, [pc, #468]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002dde:	4622      	mov	r2, r4
 8002de0:	462b      	mov	r3, r5
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	0159      	lsls	r1, r3, #5
 8002dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df0:	0150      	lsls	r0, r2, #5
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4621      	mov	r1, r4
 8002df8:	1a51      	subs	r1, r2, r1
 8002dfa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e10:	4649      	mov	r1, r9
 8002e12:	018b      	lsls	r3, r1, #6
 8002e14:	4641      	mov	r1, r8
 8002e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	018a      	lsls	r2, r1, #6
 8002e1e:	4641      	mov	r1, r8
 8002e20:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e24:	4649      	mov	r1, r9
 8002e26:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e3e:	4692      	mov	sl, r2
 8002e40:	469b      	mov	fp, r3
 8002e42:	4623      	mov	r3, r4
 8002e44:	eb1a 0303 	adds.w	r3, sl, r3
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e5e:	4629      	mov	r1, r5
 8002e60:	028b      	lsls	r3, r1, #10
 8002e62:	4621      	mov	r1, r4
 8002e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e68:	4621      	mov	r1, r4
 8002e6a:	028a      	lsls	r2, r1, #10
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e74:	2200      	movs	r2, #0
 8002e76:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e78:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e7e:	f7fd fcc9 	bl	8000814 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4613      	mov	r3, r2
 8002e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e8c:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	3301      	adds	r3, #1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eae:	e0eb      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebc:	4b35      	ldr	r3, [pc, #212]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d06b      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec8:	4b32      	ldr	r3, [pc, #200]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	2200      	movs	r2, #0
 8002ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8002edc:	2300      	movs	r3, #0
 8002ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ee0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	f04f 0000 	mov.w	r0, #0
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	0159      	lsls	r1, r3, #5
 8002ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef6:	0150      	lsls	r0, r2, #5
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4621      	mov	r1, r4
 8002efe:	1a51      	subs	r1, r2, r1
 8002f00:	61b9      	str	r1, [r7, #24]
 8002f02:	4629      	mov	r1, r5
 8002f04:	eb63 0301 	sbc.w	r3, r3, r1
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f16:	4659      	mov	r1, fp
 8002f18:	018b      	lsls	r3, r1, #6
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f20:	4651      	mov	r1, sl
 8002f22:	018a      	lsls	r2, r1, #6
 8002f24:	4651      	mov	r1, sl
 8002f26:	ebb2 0801 	subs.w	r8, r2, r1
 8002f2a:	4659      	mov	r1, fp
 8002f2c:	eb63 0901 	sbc.w	r9, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f44:	4690      	mov	r8, r2
 8002f46:	4699      	mov	r9, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	eb18 0303 	adds.w	r3, r8, r3
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb49 0303 	adc.w	r3, r9, r3
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f64:	4629      	mov	r1, r5
 8002f66:	024b      	lsls	r3, r1, #9
 8002f68:	4621      	mov	r1, r4
 8002f6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6e:	4621      	mov	r1, r4
 8002f70:	024a      	lsls	r2, r1, #9
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f7e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f84:	f7fd fc46 	bl	8000814 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f92:	e065      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x420>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	4611      	mov	r1, r2
 8002fac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002fba:	4642      	mov	r2, r8
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	f04f 0000 	mov.w	r0, #0
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	0159      	lsls	r1, r3, #5
 8002fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fcc:	0150      	lsls	r0, r2, #5
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	1a51      	subs	r1, r2, r1
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	4649      	mov	r1, r9
 8002fda:	eb63 0301 	sbc.w	r3, r3, r1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fec:	4659      	mov	r1, fp
 8002fee:	018b      	lsls	r3, r1, #6
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	018a      	lsls	r2, r1, #6
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	1a54      	subs	r4, r2, r1
 8002ffe:	4659      	mov	r1, fp
 8003000:	eb63 0501 	sbc.w	r5, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	00eb      	lsls	r3, r5, #3
 800300e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003012:	00e2      	lsls	r2, r4, #3
 8003014:	4614      	mov	r4, r2
 8003016:	461d      	mov	r5, r3
 8003018:	4643      	mov	r3, r8
 800301a:	18e3      	adds	r3, r4, r3
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	464b      	mov	r3, r9
 8003020:	eb45 0303 	adc.w	r3, r5, r3
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003032:	4629      	mov	r1, r5
 8003034:	028b      	lsls	r3, r1, #10
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800303c:	4621      	mov	r1, r4
 800303e:	028a      	lsls	r2, r1, #10
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003048:	2200      	movs	r2, #0
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800304c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800304e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003052:	f7fd fbdf 	bl	8000814 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4613      	mov	r3, r2
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003060:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x458>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0f1b      	lsrs	r3, r3, #28
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800306e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800307e:	e003      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003086:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800308c:	4618      	mov	r0, r3
 800308e:	37b8      	adds	r7, #184	@ 0xb8
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400

080030a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e28d      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8083 	beq.w	80031c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030c0:	4b94      	ldr	r3, [pc, #592]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d019      	beq.n	8003100 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030cc:	4b91      	ldr	r3, [pc, #580]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030e4:	d00c      	beq.n	8003100 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d112      	bne.n	8003118 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4b88      	ldr	r3, [pc, #544]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fe:	d10b      	bne.n	8003118 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	4b84      	ldr	r3, [pc, #528]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05b      	beq.n	80031c4 <HAL_RCC_OscConfig+0x124>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d157      	bne.n	80031c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e25a      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x90>
 8003122:	4b7c      	ldr	r3, [pc, #496]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7b      	ldr	r2, [pc, #492]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0xcc>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0xb4>
 800313a:	4b76      	ldr	r3, [pc, #472]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a75      	ldr	r2, [pc, #468]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b73      	ldr	r3, [pc, #460]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a72      	ldr	r2, [pc, #456]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0xcc>
 8003154:	4b6f      	ldr	r3, [pc, #444]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6e      	ldr	r2, [pc, #440]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b6c      	ldr	r3, [pc, #432]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6b      	ldr	r2, [pc, #428]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fcea 	bl	8001b4c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe fce6 	bl	8001b4c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	@ 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e21f      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b61      	ldr	r3, [pc, #388]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0xdc>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fcd6 	bl	8001b4c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe fcd2 	bl	8001b4c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	@ 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e20b      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	4b57      	ldr	r3, [pc, #348]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x104>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d06f      	beq.n	80032b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031d2:	4b50      	ldr	r3, [pc, #320]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d017      	beq.n	800320e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031de:	4b4d      	ldr	r3, [pc, #308]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d105      	bne.n	80031f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b47      	ldr	r3, [pc, #284]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d11c      	bne.n	800323c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b44      	ldr	r3, [pc, #272]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	4b41      	ldr	r3, [pc, #260]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_RCC_OscConfig+0x186>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e1d3      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4b3b      	ldr	r3, [pc, #236]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4937      	ldr	r1, [pc, #220]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	e03a      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003244:	4b34      	ldr	r3, [pc, #208]	@ (8003318 <HAL_RCC_OscConfig+0x278>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe fc7f 	bl	8001b4c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003252:	f7fe fc7b 	bl	8001b4c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1b4      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003270:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4925      	ldr	r1, [pc, #148]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	e015      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003286:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <HAL_RCC_OscConfig+0x278>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fc5e 	bl	8001b4c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003294:	f7fe fc5a 	bl	8001b4c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e193      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d036      	beq.n	800332c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fe fc3e 	bl	8001b4c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe fc3a 	bl	8001b4c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e173      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80032e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x234>
 80032f2:	e01b      	b.n	800332c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f4:	4b09      	ldr	r3, [pc, #36]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe fc27 	bl	8001b4c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	e00e      	b.n	8003320 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003302:	f7fe fc23 	bl	8001b4c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d907      	bls.n	8003320 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e15c      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
 8003314:	40023800 	.word	0x40023800
 8003318:	42470000 	.word	0x42470000
 800331c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b8a      	ldr	r3, [pc, #552]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8097 	beq.w	8003468 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b83      	ldr	r3, [pc, #524]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b7f      	ldr	r3, [pc, #508]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	4a7e      	ldr	r2, [pc, #504]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	@ 0x40
 800335a:	4b7c      	ldr	r3, [pc, #496]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b79      	ldr	r3, [pc, #484]	@ (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b76      	ldr	r3, [pc, #472]	@ (8003550 <HAL_RCC_OscConfig+0x4b0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a75      	ldr	r2, [pc, #468]	@ (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fe fbe3 	bl	8001b4c <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fe fbdf 	bl	8001b4c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e118      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b6c      	ldr	r3, [pc, #432]	@ (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x31e>
 80033b0:	4b66      	ldr	r3, [pc, #408]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	4a65      	ldr	r2, [pc, #404]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80033bc:	e01c      	b.n	80033f8 <HAL_RCC_OscConfig+0x358>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x340>
 80033c6:	4b61      	ldr	r3, [pc, #388]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	4a60      	ldr	r2, [pc, #384]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d2:	4b5e      	ldr	r3, [pc, #376]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	4a5d      	ldr	r2, [pc, #372]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x358>
 80033e0:	4b5a      	ldr	r3, [pc, #360]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e4:	4a59      	ldr	r2, [pc, #356]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ec:	4b57      	ldr	r3, [pc, #348]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	4a56      	ldr	r2, [pc, #344]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	f023 0304 	bic.w	r3, r3, #4
 80033f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe fba4 	bl	8001b4c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fe fba0 	bl	8001b4c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0d7      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	4b4b      	ldr	r3, [pc, #300]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RCC_OscConfig+0x368>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe fb8e 	bl	8001b4c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fe fb8a 	bl	8001b4c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0c1      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	4b40      	ldr	r3, [pc, #256]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ee      	bne.n	8003434 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	4a3a      	ldr	r2, [pc, #232]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003466:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80ad 	beq.w	80035cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003472:	4b36      	ldr	r3, [pc, #216]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	d060      	beq.n	8003540 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d145      	bne.n	8003512 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b33      	ldr	r3, [pc, #204]	@ (8003554 <HAL_RCC_OscConfig+0x4b4>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fb5e 	bl	8001b4c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fb5a 	bl	8001b4c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e093      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b29      	ldr	r3, [pc, #164]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	019b      	lsls	r3, r3, #6
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	3b01      	subs	r3, #1
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	491b      	ldr	r1, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x4b4>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fb2f 	bl	8001b4c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe fb2b 	bl	8001b4c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e064      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	4b11      	ldr	r3, [pc, #68]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x452>
 8003510:	e05c      	b.n	80035cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_RCC_OscConfig+0x4b4>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fb18 	bl	8001b4c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fb14 	bl	8001b4c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e04d      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x480>
 800353e:	e045      	b.n	80035cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e040      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
 8003554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003558:	4b1f      	ldr	r3, [pc, #124]	@ (80035d8 <HAL_RCC_OscConfig+0x538>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d030      	beq.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d129      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d122      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800358e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d119      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d10f      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07b      	b.n	80036e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035fe:	d009      	beq.n	8003614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
 8003606:	e005      	b.n	8003614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe f89c 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003698:	ea42 0103 	orr.w	r1, r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0104 	and.w	r1, r3, #4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	f003 0210 	and.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e041      	b.n	8003784 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7fe f8c7 	bl	80018a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f000 fb49 	bl	8003dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e041      	b.n	8003822 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f839 	bl	800382a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f000 fafa 	bl	8003dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_TIM_PWM_Start+0x24>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e022      	b.n	80038aa <HAL_TIM_PWM_Start+0x6a>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b04      	cmp	r3, #4
 8003868:	d109      	bne.n	800387e <HAL_TIM_PWM_Start+0x3e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	e015      	b.n	80038aa <HAL_TIM_PWM_Start+0x6a>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d109      	bne.n	8003898 <HAL_TIM_PWM_Start+0x58>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e008      	b.n	80038aa <HAL_TIM_PWM_Start+0x6a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07c      	b.n	80039ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_PWM_Start+0x82>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038c0:	e013      	b.n	80038ea <HAL_TIM_PWM_Start+0xaa>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_PWM_Start+0x92>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038d0:	e00b      	b.n	80038ea <HAL_TIM_PWM_Start+0xaa>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_PWM_Start+0xa2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038e0:	e003      	b.n	80038ea <HAL_TIM_PWM_Start+0xaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fd5c 	bl	80043b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a2d      	ldr	r2, [pc, #180]	@ (80039b4 <HAL_TIM_PWM_Start+0x174>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIM_PWM_Start+0xcc>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2c      	ldr	r2, [pc, #176]	@ (80039b8 <HAL_TIM_PWM_Start+0x178>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_TIM_PWM_Start+0xd0>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_TIM_PWM_Start+0xd2>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a22      	ldr	r2, [pc, #136]	@ (80039b4 <HAL_TIM_PWM_Start+0x174>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d022      	beq.n	8003976 <HAL_TIM_PWM_Start+0x136>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003938:	d01d      	beq.n	8003976 <HAL_TIM_PWM_Start+0x136>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1f      	ldr	r2, [pc, #124]	@ (80039bc <HAL_TIM_PWM_Start+0x17c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d018      	beq.n	8003976 <HAL_TIM_PWM_Start+0x136>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <HAL_TIM_PWM_Start+0x180>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_TIM_PWM_Start+0x136>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <HAL_TIM_PWM_Start+0x184>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_TIM_PWM_Start+0x136>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a16      	ldr	r2, [pc, #88]	@ (80039b8 <HAL_TIM_PWM_Start+0x178>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d009      	beq.n	8003976 <HAL_TIM_PWM_Start+0x136>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a18      	ldr	r2, [pc, #96]	@ (80039c8 <HAL_TIM_PWM_Start+0x188>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIM_PWM_Start+0x136>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a16      	ldr	r2, [pc, #88]	@ (80039cc <HAL_TIM_PWM_Start+0x18c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d111      	bne.n	800399a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d010      	beq.n	80039aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	e007      	b.n	80039aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40010400 	.word	0x40010400
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40001800 	.word	0x40001800

080039d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fce4 	bl	80043b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa8 <HAL_TIM_PWM_Stop+0xd8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_TIM_PWM_Stop+0x2c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2d      	ldr	r2, [pc, #180]	@ (8003aac <HAL_TIM_PWM_Stop+0xdc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_TIM_PWM_Stop+0x30>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_PWM_Stop+0x32>
 8003a00:	2300      	movs	r3, #0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d017      	beq.n	8003a36 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a1a      	ldr	r2, [r3, #32]
 8003a0c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10f      	bne.n	8003a36 <HAL_TIM_PWM_Stop+0x66>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <HAL_TIM_PWM_Stop+0x66>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a1a      	ldr	r2, [r3, #32]
 8003a3c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <HAL_TIM_PWM_Stop+0x96>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <HAL_TIM_PWM_Stop+0x96>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_PWM_Stop+0xa6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a74:	e013      	b.n	8003a9e <HAL_TIM_PWM_Stop+0xce>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_PWM_Stop+0xb6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a84:	e00b      	b.n	8003a9e <HAL_TIM_PWM_Stop+0xce>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_PWM_Stop+0xc6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a94:	e003      	b.n	8003a9e <HAL_TIM_PWM_Stop+0xce>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40010400 	.word	0x40010400

08003ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e0ae      	b.n	8003c2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	f200 809f 	bhi.w	8003c1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ade:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b19 	.word	0x08003b19
 8003ae8:	08003c1d 	.word	0x08003c1d
 8003aec:	08003c1d 	.word	0x08003c1d
 8003af0:	08003c1d 	.word	0x08003c1d
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003c1d 	.word	0x08003c1d
 8003afc:	08003c1d 	.word	0x08003c1d
 8003b00:	08003c1d 	.word	0x08003c1d
 8003b04:	08003b9b 	.word	0x08003b9b
 8003b08:	08003c1d 	.word	0x08003c1d
 8003b0c:	08003c1d 	.word	0x08003c1d
 8003b10:	08003c1d 	.word	0x08003c1d
 8003b14:	08003bdb 	.word	0x08003bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f9fc 	bl	8003f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6999      	ldr	r1, [r3, #24]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	619a      	str	r2, [r3, #24]
      break;
 8003b56:	e064      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fa4c 	bl	8003ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6999      	ldr	r1, [r3, #24]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	021a      	lsls	r2, r3, #8
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	619a      	str	r2, [r3, #24]
      break;
 8003b98:	e043      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 faa1 	bl	80040e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0208 	orr.w	r2, r2, #8
 8003bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0204 	bic.w	r2, r2, #4
 8003bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69d9      	ldr	r1, [r3, #28]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	61da      	str	r2, [r3, #28]
      break;
 8003bd8:	e023      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 faf5 	bl	80041d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69d9      	ldr	r1, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	021a      	lsls	r2, r3, #8
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	61da      	str	r2, [r3, #28]
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIM_ConfigClockSource+0x1c>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0b4      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x186>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c88:	d03e      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0xd4>
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8e:	f200 8087 	bhi.w	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c96:	f000 8086 	beq.w	8003da6 <HAL_TIM_ConfigClockSource+0x172>
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9e:	d87f      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b70      	cmp	r3, #112	@ 0x70
 8003ca2:	d01a      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0xa6>
 8003ca4:	2b70      	cmp	r3, #112	@ 0x70
 8003ca6:	d87b      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b60      	cmp	r3, #96	@ 0x60
 8003caa:	d050      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x11a>
 8003cac:	2b60      	cmp	r3, #96	@ 0x60
 8003cae:	d877      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b50      	cmp	r3, #80	@ 0x50
 8003cb2:	d03c      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xfa>
 8003cb4:	2b50      	cmp	r3, #80	@ 0x50
 8003cb6:	d873      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b40      	cmp	r3, #64	@ 0x40
 8003cba:	d058      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x13a>
 8003cbc:	2b40      	cmp	r3, #64	@ 0x40
 8003cbe:	d86f      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b30      	cmp	r3, #48	@ 0x30
 8003cc2:	d064      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cc4:	2b30      	cmp	r3, #48	@ 0x30
 8003cc6:	d86b      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d060      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d867      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d05a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	e062      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cea:	f000 fb41 	bl	8004370 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	609a      	str	r2, [r3, #8]
      break;
 8003d06:	e04f      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d18:	f000 fb2a 	bl	8004370 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d2a:	609a      	str	r2, [r3, #8]
      break;
 8003d2c:	e03c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 fa9e 	bl	800427c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2150      	movs	r1, #80	@ 0x50
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 faf7 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e02c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 fabd 	bl	80042da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2160      	movs	r1, #96	@ 0x60
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fae7 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e01c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 fa7e 	bl	800427c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2140      	movs	r1, #64	@ 0x40
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fad7 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e00c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f000 face 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8003d9e:	e003      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      break;
 8003da4:	e000      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a46      	ldr	r2, [pc, #280]	@ (8003ef0 <TIM_Base_SetConfig+0x12c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de2:	d00f      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a43      	ldr	r2, [pc, #268]	@ (8003ef4 <TIM_Base_SetConfig+0x130>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a42      	ldr	r2, [pc, #264]	@ (8003ef8 <TIM_Base_SetConfig+0x134>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a41      	ldr	r2, [pc, #260]	@ (8003efc <TIM_Base_SetConfig+0x138>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a40      	ldr	r2, [pc, #256]	@ (8003f00 <TIM_Base_SetConfig+0x13c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a35      	ldr	r2, [pc, #212]	@ (8003ef0 <TIM_Base_SetConfig+0x12c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d02b      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e24:	d027      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a32      	ldr	r2, [pc, #200]	@ (8003ef4 <TIM_Base_SetConfig+0x130>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d023      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a31      	ldr	r2, [pc, #196]	@ (8003ef8 <TIM_Base_SetConfig+0x134>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01f      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a30      	ldr	r2, [pc, #192]	@ (8003efc <TIM_Base_SetConfig+0x138>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01b      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2f      	ldr	r2, [pc, #188]	@ (8003f00 <TIM_Base_SetConfig+0x13c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d017      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2e      	ldr	r2, [pc, #184]	@ (8003f04 <TIM_Base_SetConfig+0x140>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2d      	ldr	r2, [pc, #180]	@ (8003f08 <TIM_Base_SetConfig+0x144>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00f      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2c      	ldr	r2, [pc, #176]	@ (8003f0c <TIM_Base_SetConfig+0x148>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00b      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2b      	ldr	r2, [pc, #172]	@ (8003f10 <TIM_Base_SetConfig+0x14c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2a      	ldr	r2, [pc, #168]	@ (8003f14 <TIM_Base_SetConfig+0x150>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a29      	ldr	r2, [pc, #164]	@ (8003f18 <TIM_Base_SetConfig+0x154>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a10      	ldr	r2, [pc, #64]	@ (8003ef0 <TIM_Base_SetConfig+0x12c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0xf8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <TIM_Base_SetConfig+0x13c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d103      	bne.n	8003ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	611a      	str	r2, [r3, #16]
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	40010400 	.word	0x40010400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800
 8003f10:	40001800 	.word	0x40001800
 8003f14:	40001c00 	.word	0x40001c00
 8003f18:	40002000 	.word	0x40002000

08003f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f023 0201 	bic.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f023 0302 	bic.w	r3, r3, #2
 8003f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a20      	ldr	r2, [pc, #128]	@ (8003ff4 <TIM_OC1_SetConfig+0xd8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC1_SetConfig+0x64>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff8 <TIM_OC1_SetConfig+0xdc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10c      	bne.n	8003f9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0308 	bic.w	r3, r3, #8
 8003f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	@ (8003ff4 <TIM_OC1_SetConfig+0xd8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_OC1_SetConfig+0x8e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a14      	ldr	r2, [pc, #80]	@ (8003ff8 <TIM_OC1_SetConfig+0xdc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d111      	bne.n	8003fce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	621a      	str	r2, [r3, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40010400 	.word	0x40010400

08003ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f023 0210 	bic.w	r2, r3, #16
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0320 	bic.w	r3, r3, #32
 8004046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a22      	ldr	r2, [pc, #136]	@ (80040e0 <TIM_OC2_SetConfig+0xe4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_OC2_SetConfig+0x68>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a21      	ldr	r2, [pc, #132]	@ (80040e4 <TIM_OC2_SetConfig+0xe8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10d      	bne.n	8004080 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800406a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <TIM_OC2_SetConfig+0xe4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_OC2_SetConfig+0x94>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a16      	ldr	r2, [pc, #88]	@ (80040e4 <TIM_OC2_SetConfig+0xe8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d113      	bne.n	80040b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a21      	ldr	r2, [pc, #132]	@ (80041c8 <TIM_OC3_SetConfig+0xe0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_OC3_SetConfig+0x66>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a20      	ldr	r2, [pc, #128]	@ (80041cc <TIM_OC3_SetConfig+0xe4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10d      	bne.n	800416a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a16      	ldr	r2, [pc, #88]	@ (80041c8 <TIM_OC3_SetConfig+0xe0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_OC3_SetConfig+0x92>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a15      	ldr	r2, [pc, #84]	@ (80041cc <TIM_OC3_SetConfig+0xe4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d113      	bne.n	80041a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	621a      	str	r2, [r3, #32]
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40010400 	.word	0x40010400

080041d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800421a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a12      	ldr	r2, [pc, #72]	@ (8004274 <TIM_OC4_SetConfig+0xa4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_OC4_SetConfig+0x68>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a11      	ldr	r2, [pc, #68]	@ (8004278 <TIM_OC4_SetConfig+0xa8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d109      	bne.n	800424c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800423e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40010000 	.word	0x40010000
 8004278:	40010400 	.word	0x40010400

0800427c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 030a 	bic.w	r3, r3, #10
 80042b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042da:	b480      	push	{r7}
 80042dc:	b087      	sub	sp, #28
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f023 0210 	bic.w	r2, r3, #16
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	031b      	lsls	r3, r3, #12
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004316:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	f043 0307 	orr.w	r3, r3, #7
 800435c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800438a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	021a      	lsls	r2, r3, #8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	431a      	orrs	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4313      	orrs	r3, r2
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	2201      	movs	r2, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	401a      	ands	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1a      	ldr	r2, [r3, #32]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	fa01 f303 	lsl.w	r3, r1, r3
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004410:	2302      	movs	r3, #2
 8004412:	e05a      	b.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a21      	ldr	r2, [pc, #132]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d022      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004460:	d01d      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1d      	ldr	r2, [pc, #116]	@ (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d018      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1a      	ldr	r2, [pc, #104]	@ (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a18      	ldr	r2, [pc, #96]	@ (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a17      	ldr	r2, [pc, #92]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a15      	ldr	r2, [pc, #84]	@ (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10c      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40010400 	.word	0x40010400
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40001800 	.word	0x40001800

080044f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800450c:	2302      	movs	r3, #2
 800450e:	e03d      	b.n	800458c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <memset>:
 8004598:	4402      	add	r2, r0
 800459a:	4603      	mov	r3, r0
 800459c:	4293      	cmp	r3, r2
 800459e:	d100      	bne.n	80045a2 <memset+0xa>
 80045a0:	4770      	bx	lr
 80045a2:	f803 1b01 	strb.w	r1, [r3], #1
 80045a6:	e7f9      	b.n	800459c <memset+0x4>

080045a8 <__libc_init_array>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4d0d      	ldr	r5, [pc, #52]	@ (80045e0 <__libc_init_array+0x38>)
 80045ac:	4c0d      	ldr	r4, [pc, #52]	@ (80045e4 <__libc_init_array+0x3c>)
 80045ae:	1b64      	subs	r4, r4, r5
 80045b0:	10a4      	asrs	r4, r4, #2
 80045b2:	2600      	movs	r6, #0
 80045b4:	42a6      	cmp	r6, r4
 80045b6:	d109      	bne.n	80045cc <__libc_init_array+0x24>
 80045b8:	4d0b      	ldr	r5, [pc, #44]	@ (80045e8 <__libc_init_array+0x40>)
 80045ba:	4c0c      	ldr	r4, [pc, #48]	@ (80045ec <__libc_init_array+0x44>)
 80045bc:	f000 f818 	bl	80045f0 <_init>
 80045c0:	1b64      	subs	r4, r4, r5
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	2600      	movs	r6, #0
 80045c6:	42a6      	cmp	r6, r4
 80045c8:	d105      	bne.n	80045d6 <__libc_init_array+0x2e>
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d0:	4798      	blx	r3
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7ee      	b.n	80045b4 <__libc_init_array+0xc>
 80045d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045da:	4798      	blx	r3
 80045dc:	3601      	adds	r6, #1
 80045de:	e7f2      	b.n	80045c6 <__libc_init_array+0x1e>
 80045e0:	08004620 	.word	0x08004620
 80045e4:	08004620 	.word	0x08004620
 80045e8:	08004620 	.word	0x08004620
 80045ec:	08004624 	.word	0x08004624

080045f0 <_init>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr

080045fc <_fini>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr
